import java.util.regex.Pattern

enum TestCategories {
    ActiveDirectory,
    ActuatorEndpoint(true),
    AmazonWebServices,
    AMQP,
    Attributes(true),
    Audits(true),
    Authentication(true),
    AuthenticationHandler(true),
    AuthenticationPolicy(true),
    AuthenticationMetadata(true),
    AuthenticationThrottling,
    Azure,
    CAS(true),
    CasConfiguration(true),
    Cassandra,
    Cipher(true),
    Consent(true),
    Cookie(true),
    Delegation(true),
    DuoSecurity(true),
    DynamoDb,
    Elastic(true),
    ExpirationPolicy(true),
    Events(true),
    FileSystem,
    GCP,
    GeoLocation(true),
    Git(true),
    Groovy(true),
    GroovyAuthentication(true),
    GroovyMfa(true),
    GroovyServices(true),
    Grouper,
    Hazelcast,
    Hibernate,
    Ignite,
    Impersonation(true),
    InfluxDb(true),
    JDBC,
    JDBCMFA,
    JDBCAuthentication,
    JMX(true),
    Kafka(true),
    LdapAttributes,
    LdapAuthentication,
    Ldap,
    LdapServices,
    LdapRepository,
    Logout(true),
    Mail,
    MariaDb,
    Memcached,
    Metrics(true),
    MFA(true),
    MFAProvider(true),
    MFATrigger(true),
    MFATrustedDevices,
    MongoDb,
    MongoDbMFA,
    MsSqlServer,
    MySQL,
    Native(true),
    OAuth(true),
    OAuthToken(true),
    OAuthWeb,
    OIDC,
    Oracle,
    PasswordOps(true),
    Postgres,
    Radius,
    Redis,
    RegisteredService,
    RestfulApi,
    RestfulApiAuthentication,
    SAML(true),
    SAML1(true),
    SAML2,
    SAML2Web,
    SAMLMetadata(true),
    SAMLServiceProvider(true),
    SAMLLogout(true),
    SAMLAttributes(true),
    SAMLResponse(true),
    SCIM(true),
    SHELL(true),
    Simple(true),
    SMS,
    Spnego(true),
    Syncope(true),
    Tickets,
    UMA(true),
    Utility(true),
    Web(true),
    WebApp(true),
    Webflow(true),
    WebflowActions(true),
    WebflowAccountActions(true),
    WebflowServiceActions(true),
    WebflowAuthenticationActions(true),
    WebflowConfig(true),
    WebflowMfaConfig(true),
    WebflowEvents(true),
    WebflowMfaActions(true),
    WSFederation,
    X509(true),
    ZooKeeper(true)

    boolean parallelEnabled;

    TestCategories() {
        parallelEnabled = false
    }

    TestCategories(boolean parallelEnabled) {
        this.parallelEnabled = parallelEnabled
    }
}

if (rootProject.tasks.findByName("testCategories") == null) {
    rootProject.tasks.register("testCategories") {
        description = "Display all available test categories"
        doLast {
            def pattern = System.getenv().get("CATEGORY_REGEX") ?: ".*"
            def categoryMatchPattern = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)
            def result = TestCategories.values()
                    .findAll { it.name().find(categoryMatchPattern) }
                    .toSorted({ o1, o2 ->
                        o1.name().compareTo(o2.name())
                    })
                    .collect { it.name().toLowerCase(Locale.ENGLISH) }
            println(groovy.json.JsonOutput.toJson(result))
        }
    }
}

if (rootProject.tasks.findByName("puppeteerScenarios") == null) {
    rootProject.tasks.register("puppeteerScenarios") {
        description = "Display all available puppeteer scenarios"

        def puppeteerScenariosFrom = project.providers.gradleProperty("puppeteerScenariosFrom").getOrNull()
        def puppeteerScenariosTo = project.providers.gradleProperty("puppeteerScenariosTo").getOrNull()
        def scenariosDirectory = rootProject.file("ci/tests/puppeteer/scenarios")

        doLast {
            def scenarios = []
            def pattern = System.getenv().get("SCENARIO_REGEX") ?: ".*"
            def scenarioMatchPattern = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)

            scenariosDirectory.eachDirMatch(scenarioMatchPattern) {
                scenarios += it.getName()
            }
            Collections.sort(scenarios)
            if (puppeteerScenariosFrom != null && puppeteerScenariosTo != null) {
                def fromScenario = Integer.parseInt(puppeteerScenariosFrom)
                def toScenario = Integer.parseInt(puppeteerScenariosTo)
                if (toScenario > scenarios.size())
                    toScenario = scenarios.size()
                scenarios = scenarios.subList(fromScenario, toScenario)
            }
//            println scenarios.size()
            println(groovy.json.JsonOutput.toJson(scenarios))
        }
    }
}

TestCategories.values().each({ testCategory ->
    def sourceTestDirs = project.sourceSets.test.java.srcDirs
    def jacocoTestExecutionResultsFile = project.layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
    if (hasTestsOfCategory(sourceTestDirs, testCategory.name())) {
        def taskName = "test${testCategory.name()}"
        if (!tasks.getNames().contains(taskName)) {
            // println "Creating task ${taskName} for ${project.name}"
            tasks.register(taskName, Test) {
                description = "Run unit/integration tests to verify the test category: ${testCategory.name()}"
                group = "CAS Tests"
                enabled = shouldTest(sourceTestDirs, testCategory.name())
                outputs.file(jacocoTestExecutionResultsFile)
                useJUnitPlatform {
                    includeTags testCategory.name()
                }
                if (testCategory.parallelEnabled) {
                    systemProperty("junit.jupiter.execution.parallel.enabled", true)
                    systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")
                    systemProperty("junit.jupiter.execution.parallel.mode.classes.default", "concurrent")
                    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
                    systemProperty("junit.jupiter.execution.parallel.config.dynamic.factor", "4")
                }
            }
        }
    }
})

tasks.named('test') {
    enabled = false
    onlyIf = {
        false
    }
}

tasks.withType(Test).configureEach {
    it.inputs.property("github.repository") {
        System.getenv("GITHUB_REPOSITORY") ?: "apereo/cas"
    }

    scanForTestClasses = false
    ignoreFailures = providers.systemProperty("ignoreTestFailures").present
    forkEvery = 2000
    maxParallelForks = project.ext.properties.get("maxParallelForksForTests", 8)
    if (maxParallelForks != 2) {
        logger.info "Maximum number of parallel forks is set to ${maxParallelForks}"
    }
    def ci = System.getenv().containsKey("CI")
    if (ci) {
        outputs.upToDateWhen { false }
    }
    systemProperty("spring.main.banner-mode", "off")
    systemProperty("CI", ci)


    failFast = true

    def list = []
    list.add("--add-modules")
    list.add("java.se")

    list.add("--add-exports")
    list.add("java.base/jdk.internal.ref=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.base/jdk.internal.misc=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.xml.crypto/org.jcp.xml.dsig.internal.dom=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED")

    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.util=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.time=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.net=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.security.action=jdk.crypto.ec")

    list.add("-Xms512m")
    list.add("-Xmx4g")

    list.add("-XX:+EnableDynamicAgentLoading")
    jvmArgs = list

    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")

    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = "full"

        def verbose = providers.systemProperty("verbose").present

        showStandardStreams = verbose
        showExceptions = verbose
        showCauses = verbose
        /*
        if (verbose && ci) {
            def ansi = project.ansi
            beforeSuite { desc ->
                if (!desc.parent) {
                    ansi.cyan "Started running test suite [${desc.displayName}] @ ${new java.util.Date()} "
                }
            }

            beforeTest { desc ->
                ansi.cyan "Started running test [${desc.className}:${desc.displayName}] @ ${new java.util.Date()} "
            }

            afterTest { desc, result ->
                ansi.green """
Results for test [${desc.className}:${desc.displayName}]: ${result.resultType} @ ${new java.util.Date()} 
(${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)
"""
            }
            afterSuite { desc, result ->
                if (!desc.parent) {
                    ansi.green """
Results for test suite [${desc.displayName}]: ${result.resultType} @ ${new java.util.Date()} 
(${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)
"""
                }
            }
        }
         */
    }
    def skipRetry = providers.systemProperty('skipTestRetry').present
    if (!skipRetry) {
        retry {
            maxRetries = 3
            maxFailures = 5
            failOnPassedAfterRetry = false
        }
    }
    if (!project.path.contains(":docs")) {
        jacoco {
            dumpOnExit = true
            excludes = rootProject.excludedFilesFromTestCoverage
            destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
            classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
        }
    }

    filter {
        setFailOnNoMatchingTests(false)
        excludeTestsMatching "*TestsSuite"
    }
}

def shouldTest(Set sourceTestDirectories, String category) {
    def foundTest = gradle.startParameter.taskNames.any { task -> task.matches(/^test${category}$/) }
    if (!foundTest) {
        logger.debug "No tests with category ${category} found"
    }
    return !providers.systemProperty("skipTests").present && foundTest && hasTestsOfCategory(sourceTestDirectories, category)
}

def hasTestsOfCategory(Set sourceTestDirectories, String category) {
    def res = srcTagMap.computeIfAbsent(sourceTestDirectories) {
        def tags = new HashSet()
        sourceTestDirectories.each { src ->
            try {
                src.eachFileRecurse { file ->
                    if (file ==~ /.*Tests\.\w+/) {
                        file.readLines().parallelStream().forEach() { line ->
                            def match = line =~ /^\s*@Tag\("(\w+)"\)\s*$/
                            if (match) {
                                tags.addAll(match.collect { it[1] })
                            }
                        }
                    }
                }
            } catch (ignored) {
            }
        }
        tags
    }
    res.contains(category)
}

