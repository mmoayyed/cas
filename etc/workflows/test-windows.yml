name: Tests - Windows

env:
  JAVA_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server"
  GRADLE_OPTS: "-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server"
  TERM: xterm-256color
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_PACKAGE_REGISTRY_USER: ${{ secrets.GH_PACKAGE_REGISTRY_USER }}
  GH_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GH_PACKAGE_REGISTRY_TOKEN }}
  GRADLE_BUILDCACHE_USER: ci
  GRADLE_BUILDCACHE_PSW: ${{ secrets.GRADLE_BUILDCACHE_PSW }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  SONARCLOUD_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
  JDK_CURRENT: 21
  CATEGORY_REGEX: ".*" # Use this to limit which tests run
##########################################################################

on:
  schedule:
    - cron: "0 0 * * 5"
#  push:
#    branches:
#      - master
#      - '!**.**.**'
#  pull_request:
#    types: [ labeled ]
#    branches:
#      - master
#      - '!**.**.**'

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ (github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI')) && !contains(github.event.head_commit.message, 'trigger dependency update') && !contains(github.event.head_commit.message, 'documentation update') && !contains(github.event.head_commit.message, 'ci:minimal') }}
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}


##########################################################################

  initialize:
    runs-on: ubuntu-latest
    needs: [cancel-previous-runs]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: "zulu"
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
#      - name: Gradle Wrapper Validation
#        uses: gradle/wrapper-validation-action@v1
      - name: Initialize
        run: ls ./ci && find ./ci -type f -name "*.sh" -exec chmod +x "{}" \; && ./ci/init-build.sh

##########################################################################

  cache:
    runs-on: ubuntu-latest
    needs: [initialize]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: "zulu"
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
#      - name: Gradle Wrapper Validation
#        uses: gradle/wrapper-validation-action@v1
      - name: Initialize
        run: find ./ci -type f -name "*.sh" -exec chmod +x "{}" \; && ./ci/init-build.sh
      - uses: actions/checkout@v4
      - name: Download Dependencies
        run: ./gradlew --build-cache --configure-on-demand --no-daemon downloadDependencies --parallel --refresh-dependencies --max-workers=8
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
##########################################################################
  testcategories:
    needs: [cache]
    runs-on: ubuntu-latest
    outputs:
      categories: ${{ steps.get-categories.outputs.categories }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: "zulu"
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
#      - name: Gradle Wrapper Validation
#        uses: gradle/wrapper-validation-action@v1
      - id: print-categories
        run: ./gradlew --build-cache --configure-on-demand --no-daemon -q testCategories
      - id: get-categories
        run: echo "categories=$(./gradlew --build-cache --configure-on-demand --no-daemon -q testCategories)" >> $GITHUB_OUTPUT
##########################################################################
  
  tests:
    needs: [testcategories]
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        category: ${{fromJSON(needs.testcategories.outputs.categories)}}
    name: ${{ matrix.category }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: "zulu"
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
#      - name: Gradle Wrapper Validation
#        uses: gradle/wrapper-validation-action@v1
      - name: Initialize
        run: find ./ci -type f -name "*.sh" -exec chmod +x "{}" \; && ./ci/init-build.sh
        shell: bash
      - name: Initialize Windows
        run: sc stop MongoDB
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
      - name: Run Tests
        run: ./testcas.sh --no-watch --category ${{ matrix.category }}
        shell: bash
